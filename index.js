// index.js - Full chatbot server, merge to√†n b·ªô logic c≈© v√† Cloudinary

const express = require("express");
const bodyParser = require("body-parser");
const messengerService = require("./messengerService");
const fs = require("fs");
const OpenAI = require("openai");
const cloudinary = require("cloudinary").v2;

const app = express();
app.use(bodyParser.json());

// ==== CONFIG GPT ====
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// ==== CONFIG CLOUDINARY ====
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET
});

// ==== LOAD DATA ====
const flowData = JSON.parse(fs.readFileSync("Flow_Full_Services_DrHoCaoVu.json"));
const chatbotServiceFlows = JSON.parse(fs.readFileSync("./data/chatbot-service-flows.json"));
const countryDigitRules = JSON.parse(fs.readFileSync("countryDigitRules.json"));
const countryCodes = Object.keys(countryDigitRules);

// ==== SESSION USERS ====
const completedUsers = new Set();
const handoffUsers = new Set();

// ====== GPT SENTIMENT ANALYSIS ======
async function analyzeSentimentWithGPT(message) {
  try {
    const prompt = `B·∫°n l√† chuy√™n gia ph√¢n t√≠ch c·∫£m x√∫c kh√°ch h√†ng.\nH√£y ph√¢n lo·∫°i c·∫£m x√∫c ƒëo·∫°n chat sau v√†o 1 trong 3 lo·∫°i:\n- \"negative\"\n- \"neutral\"\n- \"positive\"\n\nƒêo·∫°n chat: \"${message}\"\n\nTr·∫£ l·ªùi ch·ªâ 1 t·ª´: negative, neutral, positive`;

    const response = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [{ role: "user", content: prompt }],
      temperature: 0,
      max_tokens: 5,
    });

    const sentiment = response.choices[0].message.content.trim().toLowerCase();
    console.log("üéØ GPT Sentiment:", sentiment);
    return sentiment;
  } catch (error) {
    console.error("‚ùå GPT Error:", error.message);
    return "neutral";
  }
}

// ====== VALIDATE PHONE ======
function isValidPhoneNumber(message) {
  if (!message) return false;
  let cleanNumber = message.replace(/\s|-/g, '');

  if (cleanNumber.startsWith('0')) {
    cleanNumber = '+84' + cleanNumber.slice(1);
  }

  if (!cleanNumber.startsWith('+')) return false;

  const countryCode = countryCodes.find(code => cleanNumber.startsWith(code));
  if (!countryCode) {
    const genericPhone = /^\+\d{6,15}$/.test(cleanNumber);
    return genericPhone ? "unknown" : false;
  }

  const numberWithoutCode = cleanNumber.slice(countryCode.length);
  const digitRule = countryDigitRules[countryCode];
  if (!digitRule) return false;

  const length = numberWithoutCode.length;
  return length >= digitRule.min && length <= digitRule.max;
}

// ====== CLOUDINARY FUNCTIONS ======
async function getFeedbackImages(serviceFolder) {
  try {
    const result = await cloudinary.search
      .expression(`folder:feedback/${serviceFolder} AND resource_type:image`)
      .sort_by('public_id', 'desc')
      .max_results(10)
      .execute();

    return result.resources.map(file => file.secure_url);
  } catch (error) {
    console.error('‚ùå Cloudinary fetch error:', error);
    return [];
  }
}

async function getBangGiaImage(folder) {
  try {
    const result = await cloudinary.search
      .expression(`folder:banggia/${folder} AND resource_type:image`)
      .sort_by('public_id', 'desc')
      .max_results(1)
      .execute();

    return result.resources[0]?.secure_url || null;
  } catch (error) {
    console.error('‚ùå Cloudinary fetch b·∫£ng gi√° error:', error);
    return null;
  }
}

// ====== LOGIC KI·ªÇM TRA K·∫æT TH√öC, PH√ÄN N√ÄN, ANGRY ======
function isEndConversation(message) {
  const normalizedMsg = normalizeText(message);
  const endKeywords = ["ok", "oke", "okie", "cam on", "thanks", "ƒë∆∞·ª£c r·ªìi", "yes", "v√¢ng"];
  return endKeywords.some(keyword => normalizedMsg.includes(keyword));
}

const complaintSynonyms = {
  "kh√¥ng h√†i l√≤ng": ["ko h√†i l√≤ng", "b·∫•t m√£n", "k ok"],
  "d·ªãch v·ª• k√©m": ["d·ªãch v·ª• t·ªá", "d·ªãch v·ª• kh√¥ng t·ªët"],
  "b·ª±c m√¨nh": ["·ª©c ch·∫ø", "ch√°n gh√™"],
  "ph√†n n√†n": ["complain", "khi·∫øu n·∫°i"],
  "g·∫∑p ng∆∞·ªùi t∆∞ v·∫•n": ["g·∫∑p admin", "mu·ªën n√≥i chuy·ªán v·ªõi ng∆∞·ªùi"]
};

function isAngryCustomer(message) {
  const normalizedMsg = normalizeText(message);
  for (const key in complaintSynonyms) {
    if (normalizedMsg.includes(key)) return true;
    for (const synonym of complaintSynonyms[key]) {
      if (normalizedMsg.includes(synonym)) return true;
    }
  }
  return false;
}

function normalizeText(msg) {
  return msg?.toLowerCase()
    .normalize("NFD").replace(/\p{Diacritic}/gu, "")
    .replace(/[!.,?~]/g, "").trim() || "";
}

// ====== SEND FLOW STEPS ======
async function sendFlowSteps(sender_psid, steps, parentService) {
  const feedbackFolders = ["mat", "mui", "nguc"];

  if (feedbackFolders.includes(parentService)) {
    const feedbackImages = await getFeedbackImages(parentService);
    if (feedbackImages.length > 0) {
      await messengerService.sendMessage(sender_psid, { text: "D∆∞·ªõi ƒë√¢y l√† feedback kh√°ch h√†ng th·ª±c t·∫ø b√™n em ch·ªã tham kh·∫£o th√™m nha!" });
      for (const url of feedbackImages) {
        await messengerService.sendMessage(sender_psid, { attachment: { type: 'image', payload: { url, is_reusable: true } } });
      }
    }
  }

  for (const step of steps) {
    if (step.type === 'text') {
      await messengerService.sendMessage(sender_psid, { text: step.content });
    }
  }

  const bangGiaFolderMap = {
    "mui": "banggia_thammymui",
    "mat": "banggia_thammymat",
    "nguc": "banggia_nangnguc",
    "vungkin": "banggia_thammyvungkin",
    "damat": "banggiathammy_damat",
    "bung": "banggia_hutmobung",
    "cacdichvukhac": "banggia_cacdichvukhac"
  };

  const bangGiaFolder = bangGiaFolderMap[parentService];
  if (bangGiaFolder) {
    const bangGiaImage = await getBangGiaImage(bangGiaFolder);
    if (bangGiaImage) {
      await messengerService.sendMessage(sender_psid, { text: "ƒê√¢y l√† b·∫£ng gi√° d·ªãch v·ª• b√™n em ch·ªã tham kh·∫£o th√™m nha!" });
      await messengerService.sendMessage(sender_psid, { attachment: { type: 'image', payload: { url: bangGiaImage, is_reusable: true } } });
    }
  }

  await messengerService.sendMessage(sender_psid, { text: "Ch·ªã ƒë·ªÉ l·∫°i s·ªë ƒëi·ªán tho·∫°i/Zalo ƒë·ªÉ b√™n em t∆∞ v·∫•n chi ti·∫øt h∆°n cho m√¨nh nha!" });
}

// ====== HANDLE POSTBACK PAYLOAD ======
function handlePostback(sender_psid, postback) {
  const payload = postback.payload;
  console.log(`üì¶ Postback payload nh·∫≠n: ${payload}`);

  let foundFlow = false;
  chatbotServiceFlows.flows.forEach(service => {
    service.sub_flows.forEach(flow => {
      if (flow.payload === payload) {
        foundFlow = true;
        const parentServiceKey = normalizeText(service.parent_service.replace(/\s+/g, ""));
        sendFlowSteps(sender_psid, flow.steps, parentServiceKey);
      }
    });
  });

  if (!foundFlow) {
    messengerService.sendMessage(sender_psid, { text: "D·∫° ch·ªã quan t√¢m d·ªãch v·ª• n√†o b√™n em ƒë·ªÉ em h·ªó tr·ª£ th√™m nha!" });
  }
}

// ====== WEBHOOK HANDLER ======
app.post("/webhook", async (req, res) => {
  const body = req.body;
  if (body.object === "page") {
    body.entry.forEach(async entry => {
      const webhook_event = entry.messaging[0];
      const senderId = webhook_event.sender.id;
      const message = webhook_event.message?.text?.trim();

      if (webhook_event.postback) {
        return handlePostback(senderId, webhook_event.postback);
      }

      if (!message) return;
      console.log(`üí¨ [${senderId}] ${message}`);

      if (handoffUsers.has(senderId)) {
        if (findFlow(message)) {
          handoffUsers.delete(senderId);
          await messengerService.sendMessage(senderId, { text: "D·∫° ch·ªã c·∫ßn t∆∞ v·∫•n th√™m d·ªãch v·ª• ƒë√∫ng kh√¥ng ·∫°? Em h·ªó tr·ª£ ch·ªã ngay nha!" });
        } else return;
      }

      if (isEndConversation(message)) {
        completedUsers.add(senderId);
        return await messengerService.sendMessage(senderId, { text: "D·∫° em c·∫£m ∆°n ch·ªã, ch√∫c ch·ªã m·ªôt ng√†y t·ªët l√†nh ·∫°!" });
      }

      if (completedUsers.has(senderId)) {
        if (findFlow(message)) {
          completedUsers.delete(senderId);
          await messengerService.sendMessage(senderId, { text: "D·∫° ch·ªã c·∫ßn em h·ªó tr·ª£ th√™m d·ªãch v·ª• n√†o ·∫°?" });
        } else if (isAngryCustomer(message) || (await analyzeSentimentWithGPT(message)) === "negative") {
          handoffUsers.add(senderId);
        } else return;
      }

      if (isAngryCustomer(message)) {
        handoffUsers.add(senderId);
        return await messengerService.sendMessage(senderId, { text: "D·∫° em xin l·ªói ch·ªã, em ƒë√£ chuy·ªÉn th√¥ng tin cho t∆∞ v·∫•n vi√™n h·ªó tr·ª£ ngay ·∫°!" });
      }

      const sentiment = await analyzeSentimentWithGPT(message);
      if (sentiment === "negative") {
        handoffUsers.add(senderId);
        return await messengerService.sendMessage(senderId, { text: "D·∫° em xin l·ªói ch·ªã, b·∫°n t∆∞ v·∫•n vi√™n s·∫Ω h·ªó tr·ª£ ch·ªã ngay ·∫°!" });
      }

      if (isValidPhoneNumber(message)) {
        completedUsers.add(senderId);
        return await messengerService.sendMessage(senderId, { text: "D·∫° em ghi nh·∫≠n th√¥ng tin r·ªìi ·∫°! B·∫°n Ng√¢n - tr·ª£ l√Ω b√°c sƒ© s·∫Ω li√™n h·ªá ngay v·ªõi m√¨nh nha ch·ªã!" });
      }

      const isEnglish = /^[A-Za-z0-9 ?!.]+$/.test(message);
      if (isEnglish) {
        return await messengerService.sendMessage(senderId, { text: "Hi, may I know which service you are interested in? Please leave your Zalo/Viber/WhatsApp so our assistant Ms. Ngan can contact you soon!" });
      }

      if (message.length < 3) {
        return await messengerService.sendMessage(senderId, { text: "D·∫° ch·ªã nh·∫Øn r√µ h∆°n gi√∫p em ·∫°! Ho·∫∑c ƒë·ªÉ l·∫°i s·ªë Zalo/Viber ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n nhanh nha ch·ªã!" });
      }

      const matchedFlow = findFlow(message);
      if (matchedFlow) {
        await messengerService.sendMessage(senderId, { text: matchedFlow.action_response });
        if (matchedFlow.next_step) {
          await messengerService.sendMessage(senderId, { text: matchedFlow.next_step });
        }
        return;
      }

      await messengerService.sendMessage(senderId, { text: "D·∫° ch·ªã ƒë·ªÉ l·∫°i SƒêT/Zalo/Viber ƒë·ªÉ b·∫°n Ng√¢n - tr·ª£ l√Ω b√°c sƒ© t∆∞ v·∫•n chi ti·∫øt h∆°n cho ch·ªã nh√©!" });
    });

    res.status(200).send("EVENT_RECEIVED");
  } else {
    res.sendStatus(404);
  }
});

// ====== VERIFY WEBHOOK ======
app.get("/webhook", (req, res) => {
  const VERIFY_TOKEN = process.env.VERIFY_TOKEN;
  const mode = req.query["hub.mode"];
  const token = req.query["hub.verify_token"];
  const challenge = req.query["hub.challenge"];

  if (mode === "subscribe" && token === VERIFY_TOKEN) {
    console.log("WEBHOOK_VERIFIED");
    return res.status(200).send(challenge);
  }

  res.sendStatus(403);
});

// ====== START SERVER ======
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`üöÄ Server running on port ${PORT}`));
