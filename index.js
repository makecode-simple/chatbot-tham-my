// Import c√°c module c·∫ßn thi·∫øt
const express = require("express");
const bodyParser = require("body-parser");
const messengerService = require("./messengerService");
const cloudinary = require("cloudinary").v2;
const fs = require("fs");
const axios = require("axios");

const app = express();
app.use(bodyParser.json());

// Load JSON flow khi server kh·ªüi ƒë·ªông
const flowData = JSON.parse(fs.readFileSync("Flow_Full_Services_DrHoCaoVu.json"));

// Cloudinary Config
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET
});

// H√†m t√¨m flow ph√π h·ª£p d·ª±a v√†o trigger
function findFlow(userMessage) {
    userMessage = userMessage.toLowerCase();
    return flowData.find(item => {
        const triggers = item.sub_service.toLowerCase() + " " + item.sub_topic.toLowerCase();
        return triggers.includes(userMessage);
    });
}

// H√†m g·ªçi ChatGPT fallback v·ªõi ki·ªÉm so√°t th√¥ng tin
async function chatGPTFallback(message) {
    const apiKey = process.env.OPENAI_API_KEY;
    const endpoint = "https://api.openai.com/v1/chat/completions";

    const prompt = `
    B·∫°n l√† tr·ª£ l√Ω t∆∞ v·∫•n th·∫©m m·ªπ Dr H·ªì Cao V≈©.  
    Tr·∫£ l·ªùi th√¢n thi·ªán, chuy√™n nghi·ªáp, ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu.  
    Tuy·ªát ƒë·ªëi KH√îNG suy lu·∫≠n ho·∫∑c t·ª± ch·∫ø th√¥ng tin kh√¥ng c√≥ trong d·ªØ li·ªáu cung c·∫•p.  
    Ch·ªâ tr·∫£ l·ªùi d·ª±a tr√™n d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán ho·∫∑c cung c·∫•p b√™n d∆∞·ªõi.

    N·∫øu kh√°ch h·ªèi d·ªãch v·ª• n√¢ng ng·ª±c, m√¥ng, m·∫Øt, m≈©i, cƒÉng da m·∫∑t... ho·∫∑c ƒë·ªãa ch·ªâ, lu√¥n tr·∫£ l·ªùi theo n·ªôi dung:
    - D·∫° b√°c V≈© hi·ªán t∆∞ v·∫•n t·∫°i 134 H√† Huy T·∫≠p, Ph√∫ M·ªπ H∆∞ng, Qu·∫≠n 7. Ph·∫´u thu·∫≠t t·∫°i b·ªánh vi·ªán qu·ªëc t·∫ø Nam S√†i G√≤n.
    - C√°c d·ªãch v·ª• ch√≠nh g·ªìm: N√¢ng ng·ª±c, h√∫t m·ª° b·ª•ng, n√¢ng m≈©i, c·∫Øt m√≠, th·∫©m m·ªπ v√πng k√≠n, t√°i t·∫°o v√∫ sau ƒëi·ªÅu tr·ªã ung th∆∞...

    N·∫øu kh√¥ng t√¨m th·∫•y c√¢u h·ªèi n·∫±m trong ph·∫°m vi d·ªãch v·ª• ho·∫∑c th√¥ng tin, h√£y h·ªèi l·∫°i:
    - "D·∫° ch·ªã ƒëang h·ªèi v·ªÅ d·ªãch v·ª• g√¨ ·∫°? Ch·ªã c√≥ th·ªÉ nh·∫Øn r√µ h∆°n gi√∫p em kh√¥ng?"

    Ho·∫∑c xin s·ªë ƒëi·ªán tho·∫°i:
    - "D·∫° ƒë·ªÉ r√µ h∆°n, ch·ªã ƒë·ªÉ l·∫°i s·ªë ƒëi·ªán tho·∫°i/Zalo, b√™n em t∆∞ v·∫•n k·ªπ h∆°n nha!"

    N·∫øu kh√°ch vi·∫øt t·∫Øt ho·∫∑c nh·∫Øn kh√¥ng r√µ:
    - "D·∫° do ch·ªã vi·∫øt t·∫Øt, em ch∆∞a r√µ l·∫Øm. Ch·ªã nh·∫Øn gi√∫p em chi ti·∫øt h∆°n nha!"
    `;

    const data = {
        model: "gpt-3.5-turbo",
        messages: [
            { role: "system", content: prompt },
            { role: "user", content: message }
        ],
        max_tokens: 300
    };

    try {
        const res = await axios.post(endpoint, data, {
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${apiKey}`
            }
        });

        return res.data.choices[0].message.content;
    } catch (error) {
        console.error("ChatGPT Error:", error);
        return "D·∫° xin l·ªói ch·ªã, em ch∆∞a r√µ c√¢u h·ªèi. Ch·ªã ƒë·ªÉ l·∫°i s·ªë ƒëi·ªán tho·∫°i/Zalo ƒë·ªÉ em t∆∞ v·∫•n k·ªπ h∆°n nha!";
    }
}

// L·ªùi ch√†o m·∫∑c ƒë·ªãnh khi kh√°ch m·ªõi nh·∫Øn tin ho·∫∑c nh·∫Øn chung chung
const greetingMessage = `D·∫° ch√†o ch·ªã, ch·ªã mu·ªën t∆∞ v·∫•n d·ªãch v·ª• th·∫©m m·ªπ t·∫°o h√¨nh n√†o d∆∞·ªõi ƒë√¢y ·∫°:\n‚Ä¢ Ph·∫´u thu·∫≠t n√¢ng ng·ª±c/ th√°o t√∫i ng·ª±c/ b√≥c bao x∆°\n‚Ä¢ T√°i t·∫°o v√∫ sau khi ƒëi·ªÅu tr·ªã ung th∆∞\n‚Ä¢ H√∫t m·ª° b·ª•ng, t·∫°o h√¨nh th√†nh b·ª•ng sau sinh\n‚Ä¢ Ti·ªÉu ph·∫´u c·∫Øt m√≠\n‚Ä¢ Ti·ªÉu ph·∫´u treo cung m√†y\n‚Ä¢ Ch·ªânh m·∫Øt l·ªói\n‚Ä¢ N√¢ng m≈©i t√°i c·∫•u tr√∫c/ n√¢ng m≈©i s·ª•n s∆∞·ªùn\n‚Ä¢ Ch·ªânh m≈©i l·ªói\n‚Ä¢ Ph·∫´u thu·∫≠t cƒÉng da m·∫∑t\n‚Ä¢ H√∫t m·ª° b·ª•ng/tay/ ƒë√πi/ l∆∞ng\n‚Ä¢ Th·∫©m m·ªπ v√πng k√≠n\n‚Ä¢ CƒÉng da m·∫∑t to√†n di·ªán\n‚Ä¢ CƒÉng ch·ªâ da m·∫∑t/ PRP tr·∫ª h√≥a\n‚Ä¢ ƒê·ªôn th√°i d∆∞∆°ng/ ƒë·ªôn c·∫±m\n‚Ä¢ H√∫t m·ª° ti√™m l√™n m·∫∑t`;

// C√°c t·ª´ kho√° k√≠ch ho·∫°t g·ª≠i list d·ªãch v·ª• v√† h·ªèi th√¥ng tin ƒë·ªãa ch·ªâ
const genericTriggers = [
    "t∆∞ v·∫•n", "d·ªãch v·ª•", "gi·ªõi thi·ªáu", "th·∫©m m·ªπ", "c√≥ g√¨", "mu·ªën bi·∫øt d·ªãch v·ª•",
    "hello", "help me", "i need more information", "t∆∞ v·∫•n gi√∫p", "mu·ªën l√†m ƒë·∫πp", "kh√¥ng ƒëau", "hi", "ch·ªã c·∫ßn t∆∞ v·∫•n",
	"cho ch·ªã th√¥ng tin d·ªãch v·ª• b√™n m√¨nh ƒëi em", "d.v b√™n m√¨nh sao em", "tu van dich vu", "co nhung dich vu tham my nao"
];

const addressTriggers = [
    "ƒë·ªãa ch·ªâ", "ph√≤ng kh√°m ·ªü ƒë√¢u", "ƒë/c", "dc o dau", "d/c ·ªü ƒë√¢u", "l·ªãch kh√°m", "n∆°i b√°c kh√°m th·∫©m m·ªπ ·ªü ƒë√¢u", "ch·ªó n√†o kh√°m", "ch·ªó kh√°m ·ªü ƒë√¢u", "where is the address", "address of dr Vu", "vƒÉn ph√≤ng b√°c sƒ©", "office c·ªßa b√°c sƒ© ·ªü ƒë√¢u", "ph√≤ng m·∫°ch c·ªßa b√°c sƒ© v≈© ·ªü ƒë√¢u", "dc o dau", "d.c o dau vay"
];

// Webhook nh·∫≠n tin nh·∫Øn t·ª´ Messenger
app.post("/webhook", async (req, res) => {
    const body = req.body;

    if (body.object === "page") {
        body.entry.forEach(async function (entry) {
            const webhook_event = entry.messaging[0];
            const senderId = webhook_event.sender.id;

            // Ki·ªÉm tra c√≥ message v√† text hay kh√¥ng
            if (webhook_event.message && webhook_event.message.text) {
                const message = webhook_event.message.text.trim();
                const lowerCaseMessage = message.toLowerCase();

                console.log("Received message:", message);

                // N·∫øu c√¢u qu√° ng·∫Øn ho·∫∑c v√¥ nghƒ©a
                if (message.length < 3) {
                    await messengerService.sendMessage(senderId, {
                        text: "D·∫° ch·ªã h·ªèi r√µ h∆°n gi√∫p em v·ªõi ·∫°! Ho·∫∑c ch·ªã ƒë·ªÉ l·∫°i s·ªë ƒëi·ªán tho·∫°i/Zalo ƒë·ªÉ em t∆∞ v·∫•n k·ªπ h∆°n nha!"
                    });
                    return;
                }

				// Ki·ªÉm tra ƒë·ªãa ch·ªâ
					if (addressTriggers.some(trigger => lowerCaseMessage.includes(trigger))) {
						const addressInfo = `D·∫° b√°c V≈© hi·ªán t∆∞ v·∫•n t·∫°i 134 H√† Huy T·∫≠p, Ph√∫ M·ªπ H∆∞ng, Qu·∫≠n 7.
					‚úÖ Ph·∫´u thu·∫≠t th·ª±c hi·ªán t·∫°i b·ªánh vi·ªán qu·ªëc t·∫ø Nam S√†i G√≤n.
					üéØ Hi·ªán t·∫°i b√°c V≈© ch·ªâ nh·∫≠n kh√°m v√† t∆∞ v·∫•n theo l·ªãch h·∫πn tr∆∞·ªõc nha ch·ªã!`;

						await messengerService.sendMessage(senderId, { text: addressInfo });

						// K·∫øt th√∫c x·ª≠ l√Ω ngay, kh√¥ng g·ª≠i th√™m ChatGPT hay flow g√¨ n·ªØa
						return;
					}

                // Ki·ªÉm tra generic trigger (h·ªèi chung d·ªãch v·ª•)
                if (genericTriggers.some(trigger => lowerCaseMessage.includes(trigger))) {
                    await messengerService.sendMessage(senderId, { text: greetingMessage });
                    return;
                }

                // Ki·ªÉm tra flow d·ªãch v·ª•
                const matchedFlow = findFlow(message);

                if (matchedFlow) {
                    await messengerService.sendMessage(senderId, { text: matchedFlow.action_response });

                    if (matchedFlow.next_step && matchedFlow.next_step.trim() !== "") {
                        await messengerService.sendMessage(senderId, { text: matchedFlow.next_step });
                    }
                    return;
                }

                // N·∫øu kh√¥ng c√≥ g√¨ kh·ªõp, fallback ChatGPT
                const chatGPTResponse = await chatGPTFallback(message);
                await messengerService.sendMessage(senderId, { text: chatGPTResponse });
            } else {
                console.log("S·ª± ki·ªán kh√¥ng ph·∫£i tin nh·∫Øn, b·ªè qua!");
            }
        });

        res.status(200).send("EVENT_RECEIVED");
    } else {
        res.sendStatus(404);
    }
});


app.get("/webhook", (req, res) => {
    const VERIFY_TOKEN = process.env.VERIFY_TOKEN;
    const mode = req.query["hub.mode"];
    const token = req.query["hub.verify_token"];
    const challenge = req.query["hub.challenge"];

    if (mode && token) {
        if (mode === "subscribe" && token === VERIFY_TOKEN) {
            console.log("WEBHOOK_VERIFIED");
            res.status(200).send(challenge);
        } else {
            res.sendStatus(403);
        }
    }
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));