const messengerClient = require('./services/messengerClient');
const { getFeedbackImages, getBangGiaImage } = require('./cloudinaryService');
const sendBienChungFlow = require('./flows/bienChungFlow');
const sendTreoSaTreFlow = require('./flows/treoSaTreFlow');

async function sendMenuDichVu(sender_psid) {
  console.log("üöÄ Trigger Menu D·ªãch V·ª•");
  await messengerClient.sendMessage(sender_psid, {
    text: `D·∫° ch√†o ch·ªã, ch·ªã mu·ªën t∆∞ v·∫•n d·ªãch v·ª• th·∫©m m·ªπ t·∫°o h√¨nh n√†o d∆∞·ªõi ƒë√¢y ·∫°:

* Ph·∫´u thu·∫≠t n√¢ng ng·ª±c/ th√°o t√∫i ng·ª±c/ b√≥c bao x∆°
* T√°i t·∫°o v√∫ sau khi ƒëi·ªÅu tr·ªã ung th∆∞
* H√∫t m·ª° b·ª•ng, t·∫°o h√¨nh th√†nh b·ª•ng sau sinh
* Ti·ªÉu ph·∫´u c·∫Øt m√≠
* Ti·ªÉu ph·∫´u treo cung m√†y
* Ch·ªânh m·∫Øt l·ªói
* N√¢ng m≈©i t√°i c·∫•u tr√∫c/ n√¢ng m≈©i s·ª•n s∆∞·ªùn
* Ch·ªânh m≈©i l·ªói
* Ph·∫´u thu·∫≠t cƒÉng da m·∫∑t
* H√∫t m·ª° b·ª•ng/tay/ ƒë√πi/ l∆∞ng
* Th·∫©m m·ªπ v√πng k√≠n
* CƒÉng da m·∫∑t to√†n di·ªán
* CƒÉng ch·ªâ da m·∫∑t/ PRP tr·∫ª h√≥a
* ƒê·ªôn th√°i d∆∞∆°ng/ ƒë·ªôn c·∫±m
* H√∫t m·ª° ti√™m l√™n m·∫∑t`
  });
}

async function sendBangGiaOnlyFlow(sender_psid, type) {
  console.log("üöÄ Trigger B·∫£ng Gi√° Flow:", type);
  const bangGiaImage = await getBangGiaImage(`banggia_${type}`);
  if (bangGiaImage) {
    await messengerClient.sendMessage(sender_psid, {
      attachment: { type: 'image', payload: { url: bangGiaImage, is_reusable: true } }
    });
  }
}

async function sendMenuBangGia(sender_psid) {
  console.log("üöÄ Trigger Menu B·∫£ng Gi√°");
  await sendBangGiaOnlyFlow(sender_psid, "cacdichvu");
}

async function defaultServiceFlow(sender_psid, serviceName) {
  console.log(`üöÄ Trigger ${serviceName} Flow`);
  
  await messengerClient.sendMessage(sender_psid, {
    text: `D·∫° v·ªõi h∆°n 10 nƒÉm kinh nghi·ªám, th·∫©m m·ªπ h∆°n 5000 ca m·∫Øt - m≈©i - ng·ª±c, ch·ªã y√™n t√¢m B√°c s·∫Ω ƒë∆∞a ra gi·∫£i ph√°p t·ªët nh·∫•t ph√π h·ª£p v·ªõi c∆° ƒë·ªãa v√† mong mu·ªën c·ªßa ch·ªã.`
  });

  await messengerClient.sendMessage(sender_psid, {
    text: "Ch·ªã ƒë·ªÉ l·∫°i s·ªë ƒëi·ªán tho·∫°i/Zalo/Viber ƒë·ªÉ b√™n em t∆∞ v·∫•n chi ti·∫øt h∆°n cho m√¨nh nha!"
  });
}

async function sendDiaChiFlow(sender_psid) {
  console.log("üöÄ Trigger ƒê·ªãa Ch·ªâ Flow");
  await messengerClient.sendMessage(sender_psid, {
    text: `D·∫° b√°c V≈© t∆∞ v·∫•n t·∫°i 134 H√† Huy T·∫≠p, Ph√∫ M·ªπ H∆∞ng, Qu·∫≠n 7

* Ph·∫´u thu·∫≠t t·∫°i b·ªánh vi·ªán qu·ªëc t·∫ø Nam S√†i G√≤n.
* Hi·ªán t·∫°i b√°c V≈© ch·ªâ nh·∫≠n kh√°m v√† t∆∞ v·∫•n theo l·ªãch h·∫πn tr∆∞·ªõc ·∫°.`
  });
}

const serviceFlows = {
  sendNangNgucFlow: require('./flows/nangNgucFlow'),
  sendThaoTuiNgucFlow: require('./flows/thaoTuiNgucFlow'),
  sendNangMuiFlow: require('./flows/nangMuiFlow'),
  sendThamMyMatFlow: require('./flows/thamMyMatFlow'),
  sendHutMoBungFlow: require('./flows/hutMoBungFlow'),
  sendThamMyVungKinFlow: require('./flows/thamMyVungKinFlow'),
  sendCangDaMatFlow: require('./flows/cangDaMatFlow'),
  sendThamMyCamFlow: require('./flows/thamMyCamFlow'),
  sendTreoCungMayFlow: require('./flows/treoCungMayFlow'),
  sendTaiTaoVuFlow: require('./flows/taiTaoVuFlow'),
  sendTaoHinhThanhBungFlow: require('./flows/taoHinhThanhBungFlow'),
  sendChinhMatLoiFlow: require('./flows/chinhMatLoiFlow'),
  sendChinhMuiLoiFlow: require('./flows/chinhMuiLoiFlow'),
  sendHutMoBodyFlow: require('./flows/hutMoBodyFlow'),
  sendCangChiDaMatFlow: require('./flows/cangChiDaMatFlow'),
  sendDonThaiDuongFlow: require('./flows/donThaiDuongFlow'),
  sendHutMoTiemLenMatFlow: require('./flows/hutMoTiemLenMatFlow'),
  sendFeedbackFlow: require('./flows/feedbackFlow'),
  // Add FAQ flows
  // Change from sendFaqThaoTuiFlow to sendThaoTuiFaq to match the intent handler
  sendThaoTuiFaq: require('./flows/faqThaoTuiFlow'),
  sendFaqNangNgucDaoFlow: require('./flows/faqNangNgucDaoFlow'),
  // Change from sendFaqNgucBayFlow to sendNgucBayFaq to match handleMessage.js
  sendNgucBayFaq: require('./flows/faqNgucBayFlow'),
  sendFaqSizeTuiFlow: require('./flows/faqSizeTuiFlow'),
  
  // Add missing flows
  sendHoiGiaFlow: require('./flows/hoiGiaFlow'),
  
  // Existing flows
  sendBienChungFlow,
  sendDiaChiFlow,
  sendMenuDichVu,
  sendBangGiaOnlyFlow,
  sendMenuBangGia,
  sendBookingFlow: require('./flows/bookingFlow'),
  sendTreoSaTreFlow,
};

module.exports = serviceFlows;